package com.kernicky.gl_prototype.models;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import com.kernicky.gl_prototype.MyGLRenderer;

import android.opengl.GLES20;
import android.opengl.Matrix;

public class Lamp extends Model {
	private float rot = 0.0f;
	private float[] mModel = new float[16];
	private float[] mELightPos = new float[4];
	private float[] mLightPos = new float[4];
	
	public Lamp(float x, float y, float z) {
		mLightPos[0] = x;
		mLightPos[1] = y;
		mLightPos[2] = z;
		//mLightPos[3] = 1.0f;
		float coords[] = { 0.0f, -0.5f, 0.0f, 0.2126615f, -0.425327f, 0.1545055f, -0.081228f, -0.425327f, 0.2499975f, 0.3618035f, -0.22361f, 0.2628625f, 0.2126615f, -0.425327f, 0.1545055f, 0.425324f, -0.262868f, 0.0f, 0.0f, -0.5f, 0.0f, -0.081228f, -0.425327f, 0.2499975f, -0.262865f, -0.425326f, 0.0f, 0.0f, -0.5f, 0.0f, -0.262865f, -0.425326f, 0.0f, -0.081228f, -0.425327f, -0.2499975f, 0.0f, -0.5f, 0.0f, -0.081228f, -0.425327f, -0.2499975f, 0.2126615f, -0.425327f, -0.1545055f, 0.3618035f, -0.22361f, 0.2628625f, 0.425324f, -0.262868f, 0.0f, 0.475529f, 0.0f, 0.1545065f, -0.138194f, -0.22361f, 0.4253245f, 0.1314345f, -0.262869f, 0.404506f, 0.0f, 0.0f, 0.5f, -0.447213f, -0.223608f, 0.0f, -0.3440945f, -0.262868f, 0.2499985f, -0.475529f, 0.0f, 0.1545065f, -0.138194f, -0.22361f, -0.4253245f, -0.3440945f, -0.262868f, -0.2499985f, -0.293893f, 0.0f, -0.4045085f, 0.3618035f, -0.22361f, -0.2628625f, 0.1314345f, -0.262869f, -0.404506f, 0.293893f, 0.0f, -0.4045085f, 0.3618035f, -0.22361f, 0.2628625f, 0.475529f, 0.0f, 0.1545065f, 0.293893f, 0.0f, 0.4045085f, -0.138194f, -0.22361f, 0.4253245f, 0.0f, 0.0f, 0.5f, -0.293893f, 0.0f, 0.4045085f, -0.447213f, -0.223608f, 0.0f, -0.475529f, 0.0f, 0.1545065f, -0.475529f, 0.0f, -0.1545065f, -0.138194f, -0.22361f, -0.4253245f, -0.293893f, 0.0f, -0.4045085f, 0.0f, 0.0f, -0.5f, 0.3618035f, -0.22361f, -0.2628625f, 0.293893f, 0.0f, -0.4045085f, 0.475529f, 0.0f, -0.1545065f, 0.138194f, 0.22361f, 0.4253245f, 0.3440945f, 0.262868f, 0.2499985f, 0.081228f, 0.425327f, 0.2499975f, -0.3618035f, 0.22361f, 0.2628625f, -0.1314345f, 0.262869f, 0.404506f, -0.2126615f, 0.425327f, 0.1545055f, -0.3618035f, 0.22361f, -0.2628625f, -0.425324f, 0.262868f, 0.0f, -0.2126615f, 0.425327f, -0.1545055f, 0.138194f, 0.22361f, -0.4253245f, -0.1314345f, 0.262869f, -0.404506f, 0.081228f, 0.425327f, -0.2499975f, 0.447213f, 0.223608f, 0.0f, 0.3440945f, 0.262868f, -0.2499985f, 0.262865f, 0.425326f, 0.0f, -0.081228f, -0.425327f, 0.2499975f, 0.1314345f, -0.262869f, 0.404506f, -0.138194f, -0.22361f, 0.4253245f, -0.081228f, -0.425327f, 0.2499975f, 0.2126615f, -0.425327f, 0.1545055f, 0.1314345f, -0.262869f, 0.404506f, 0.2126615f, -0.425327f, 0.1545055f, 0.3618035f, -0.22361f, 0.2628625f, 0.1314345f, -0.262869f, 0.404506f, 0.425324f, -0.262868f, 0.0f, 0.2126615f, -0.425327f, -0.1545055f, 0.3618035f, -0.22361f, -0.2628625f, 0.425324f, -0.262868f, 0.0f, 0.2126615f, -0.425327f, 0.1545055f, 0.2126615f, -0.425327f, -0.1545055f, 0.2126615f, -0.425327f, 0.1545055f, 0.0f, -0.5f, 0.0f, 0.2126615f, -0.425327f, -0.1545055f, -0.262865f, -0.425326f, 0.0f, -0.3440945f, -0.262868f, 0.2499985f, -0.447213f, -0.223608f, 0.0f, -0.262865f, -0.425326f, 0.0f, -0.081228f, -0.425327f, 0.2499975f, -0.3440945f, -0.262868f, 0.2499985f, -0.081228f, -0.425327f, 0.2499975f, -0.138194f, -0.22361f, 0.4253245f, -0.3440945f, -0.262868f, 0.2499985f, -0.081228f, -0.425327f, -0.2499975f, -0.3440945f, -0.262868f, -0.2499985f, -0.138194f, -0.22361f, -0.4253245f, -0.081228f, -0.425327f, -0.2499975f, -0.262865f, -0.425326f, 0.0f, -0.3440945f, -0.262868f, -0.2499985f, -0.262865f, -0.425326f, 0.0f, -0.447213f, -0.223608f, 0.0f, -0.3440945f, -0.262868f, -0.2499985f, 0.2126615f, -0.425327f, -0.1545055f, 0.1314345f, -0.262869f, -0.404506f, 0.3618035f, -0.22361f, -0.2628625f, 0.2126615f, -0.425327f, -0.1545055f, -0.081228f, -0.425327f, -0.2499975f, 0.1314345f, -0.262869f, -0.404506f, -0.081228f, -0.425327f, -0.2499975f, -0.138194f, -0.22361f, -0.4253245f, 0.1314345f, -0.262869f, -0.404506f, 0.475529f, 0.0f, 0.1545065f, 0.475529f, 0.0f, -0.1545065f, 0.447213f, 0.223608f, 0.0f, 0.475529f, 0.0f, 0.1545065f, 0.425324f, -0.262868f, 0.0f, 0.475529f, 0.0f, -0.1545065f, 0.425324f, -0.262868f, 0.0f, 0.3618035f, -0.22361f, -0.2628625f, 0.475529f, 0.0f, -0.1545065f, 0.0f, 0.0f, 0.5f, 0.293893f, 0.0f, 0.4045085f, 0.138194f, 0.22361f, 0.4253245f, 0.0f, 0.0f, 0.5f, 0.1314345f, -0.262869f, 0.404506f, 0.293893f, 0.0f, 0.4045085f, 0.1314345f, -0.262869f, 0.404506f, 0.3618035f, -0.22361f, 0.2628625f, 0.293893f, 0.0f, 0.4045085f, -0.475529f, 0.0f, 0.1545065f, -0.293893f, 0.0f, 0.4045085f, -0.3618035f, 0.22361f, 0.2628625f, -0.475529f, 0.0f, 0.1545065f, -0.3440945f, -0.262868f, 0.2499985f, -0.293893f, 0.0f, 0.4045085f, -0.3440945f, -0.262868f, 0.2499985f, -0.138194f, -0.22361f, 0.4253245f, -0.293893f, 0.0f, 0.4045085f, -0.293893f, 0.0f, -0.4045085f, -0.475529f, 0.0f, -0.1545065f, -0.3618035f, 0.22361f, -0.2628625f, -0.293893f, 0.0f, -0.4045085f, -0.3440945f, -0.262868f, -0.2499985f, -0.475529f, 0.0f, -0.1545065f, -0.3440945f, -0.262868f, -0.2499985f, -0.447213f, -0.223608f, 0.0f, -0.475529f, 0.0f, -0.1545065f, 0.293893f, 0.0f, -0.4045085f, 0.0f, 0.0f, -0.5f, 0.138194f, 0.22361f, -0.4253245f, 0.293893f, 0.0f, -0.4045085f, 0.1314345f, -0.262869f, -0.404506f, 0.0f, 0.0f, -0.5f, 0.1314345f, -0.262869f, -0.404506f, -0.138194f, -0.22361f, -0.4253245f, 0.0f, 0.0f, -0.5f, 0.293893f, 0.0f, 0.4045085f, 0.3440945f, 0.262868f, 0.2499985f, 0.138194f, 0.22361f, 0.4253245f, 0.293893f, 0.0f, 0.4045085f, 0.475529f, 0.0f, 0.1545065f, 0.3440945f, 0.262868f, 0.2499985f, 0.475529f, 0.0f, 0.1545065f, 0.447213f, 0.223608f, 0.0f, 0.3440945f, 0.262868f, 0.2499985f, -0.293893f, 0.0f, 0.4045085f, -0.1314345f, 0.262869f, 0.404506f, -0.3618035f, 0.22361f, 0.2628625f, -0.293893f, 0.0f, 0.4045085f, 0.0f, 0.0f, 0.5f, -0.1314345f, 0.262869f, 0.404506f, 0.0f, 0.0f, 0.5f, 0.138194f, 0.22361f, 0.4253245f, -0.1314345f, 0.262869f, 0.404506f, -0.475529f, 0.0f, -0.1545065f, -0.425324f, 0.262868f, 0.0f, -0.3618035f, 0.22361f, -0.2628625f, -0.475529f, 0.0f, -0.1545065f, -0.475529f, 0.0f, 0.1545065f, -0.425324f, 0.262868f, 0.0f, -0.475529f, 0.0f, 0.1545065f, -0.3618035f, 0.22361f, 0.2628625f, -0.425324f, 0.262868f, 0.0f, 0.0f, 0.0f, -0.5f, -0.1314345f, 0.262869f, -0.404506f, 0.138194f, 0.22361f, -0.4253245f, 0.0f, 0.0f, -0.5f, -0.293893f, 0.0f, -0.4045085f, -0.1314345f, 0.262869f, -0.404506f, -0.293893f, 0.0f, -0.4045085f, -0.3618035f, 0.22361f, -0.2628625f, -0.1314345f, 0.262869f, -0.404506f, 0.475529f, 0.0f, -0.1545065f, 0.3440945f, 0.262868f, -0.2499985f, 0.447213f, 0.223608f, 0.0f, 0.475529f, 0.0f, -0.1545065f, 0.293893f, 0.0f, -0.4045085f, 0.3440945f, 0.262868f, -0.2499985f, 0.293893f, 0.0f, -0.4045085f, 0.138194f, 0.22361f, -0.4253245f, 0.3440945f, 0.262868f, -0.2499985f, 0.081228f, 0.425327f, 0.2499975f, 0.262865f, 0.425326f, 0.0f, 0.0f, 0.5f, 0.0f, 0.081228f, 0.425327f, 0.2499975f, 0.3440945f, 0.262868f, 0.2499985f, 0.262865f, 0.425326f, 0.0f, 0.3440945f, 0.262868f, 0.2499985f, 0.447213f, 0.223608f, 0.0f, 0.262865f, 0.425326f, 0.0f, -0.2126615f, 0.425327f, 0.1545055f, 0.081228f, 0.425327f, 0.2499975f, 0.0f, 0.5f, 0.0f, -0.2126615f, 0.425327f, 0.1545055f, -0.1314345f, 0.262869f, 0.404506f, 0.081228f, 0.425327f, 0.2499975f, -0.1314345f, 0.262869f, 0.404506f, 0.138194f, 0.22361f, 0.4253245f, 0.081228f, 0.425327f, 0.2499975f, -0.2126615f, 0.425327f, -0.1545055f, -0.2126615f, 0.425327f, 0.1545055f, 0.0f, 0.5f, 0.0f, -0.2126615f, 0.425327f, -0.1545055f, -0.425324f, 0.262868f, 0.0f, -0.2126615f, 0.425327f, 0.1545055f, -0.425324f, 0.262868f, 0.0f, -0.3618035f, 0.22361f, 0.2628625f, -0.2126615f, 0.425327f, 0.1545055f, 0.081228f, 0.425327f, -0.2499975f, -0.2126615f, 0.425327f, -0.1545055f, 0.0f, 0.5f, 0.0f, 0.081228f, 0.425327f, -0.2499975f, -0.1314345f, 0.262869f, -0.404506f, -0.2126615f, 0.425327f, -0.1545055f, -0.1314345f, 0.262869f, -0.404506f, -0.3618035f, 0.22361f, -0.2628625f, -0.2126615f, 0.425327f, -0.1545055f, 0.262865f, 0.425326f, 0.0f, 0.081228f, 0.425327f, -0.2499975f, 0.0f, 0.5f, 0.0f, 0.262865f, 0.425326f, 0.0f, 0.3440945f, 0.262868f, -0.2499985f, 0.081228f, 0.425327f, -0.2499975f, 0.3440945f, 0.262868f, -0.2499985f, 0.138194f, 0.22361f, -0.4253245f, 0.081228f, 0.425327f, -0.2499975f };
		float normals[] = { 0.102381f, -0.943523f, 0.31509f, 0.102381f, -0.943523f, 0.31509f, 0.102381f, -0.943523f, 0.31509f, 0.700224f, -0.661699f, 0.268032f, 0.700224f, -0.661699f, 0.268032f, 0.700224f, -0.661699f, 0.268032f, -0.268034f, -0.943523f, 0.194737f, -0.268034f, -0.943523f, 0.194737f, -0.268034f, -0.943523f, 0.194737f, -0.268034f, -0.943523f, -0.194737f, -0.268034f, -0.943523f, -0.194737f, -0.268034f, -0.943523f, -0.194737f, 0.102381f, -0.943523f, -0.31509f, 0.102381f, -0.943523f, -0.31509f, 0.102381f, -0.943523f, -0.31509f, 0.904989f, -0.330384f, 0.268031f, 0.904989f, -0.330384f, 0.268031f, 0.904989f, -0.330384f, 0.268031f, 0.024747f, -0.330386f, 0.943521f, 0.024747f, -0.330386f, 0.943521f, 0.024747f, -0.330386f, 0.943521f, -0.889697f, -0.330385f, 0.315095f, -0.889697f, -0.330385f, 0.315095f, -0.889697f, -0.330385f, 0.315095f, -0.574602f, -0.330388f, -0.748784f, -0.574602f, -0.330388f, -0.748784f, -0.574602f, -0.330388f, -0.748784f, 0.534576f, -0.330386f, -0.777865f, 0.534576f, -0.330386f, -0.777865f, 0.534576f, -0.330386f, -0.777865f, 0.802609f, -0.125627f, 0.583126f, 0.802609f, -0.125627f, 0.583126f, 0.802609f, -0.125627f, 0.583126f, -0.306569f, -0.125629f, 0.943522f, -0.306569f, -0.125629f, 0.943522f, -0.306569f, -0.125629f, 0.943522f, -0.992077f, -0.125628f, 0.0f, -0.992077f, -0.125628f, 0.0f, -0.992077f, -0.125628f, 0.0f, -0.306569f, -0.125629f, -0.943522f, -0.306569f, -0.125629f, -0.943522f, -0.306569f, -0.125629f, -0.943522f, 0.802609f, -0.125627f, -0.583126f, 0.802609f, -0.125627f, -0.583126f, 0.802609f, -0.125627f, -0.583126f, 0.408946f, 0.661698f, 0.628425f, 0.408946f, 0.661698f, 0.628425f, 0.408946f, 0.661698f, 0.628425f, -0.4713f, 0.661699f, 0.583122f, -0.4713f, 0.661699f, 0.583122f, -0.4713f, 0.661699f, 0.583122f, -0.700224f, 0.661699f, -0.268032f, -0.700224f, 0.661699f, -0.268032f, -0.700224f, 0.661699f, -0.268032f, 0.03853f, 0.661699f, -0.748779f, 0.03853f, 0.661699f, -0.748779f, 0.03853f, 0.661699f, -0.748779f, 0.724042f, 0.661695f, -0.194736f, 0.724042f, 0.661695f, -0.194736f, 0.724042f, 0.661695f, -0.194736f, -0.03853f, -0.661699f, 0.748779f, -0.03853f, -0.661699f, 0.748779f, -0.03853f, -0.661699f, 0.748779f, 0.187594f, -0.794658f, 0.577345f, 0.187594f, -0.794658f, 0.577345f, 0.187594f, -0.794658f, 0.577345f, 0.4713f, -0.661699f, 0.583122f, 0.4713f, -0.661699f, 0.583122f, 0.4713f, -0.661699f, 0.583122f, 0.700224f, -0.661699f, -0.268032f, 0.700224f, -0.661699f, -0.268032f, 0.700224f, -0.661699f, -0.268032f, 0.60706f, -0.794656f, 0.0f, 0.60706f, -0.794656f, 0.0f, 0.60706f, -0.794656f, 0.0f, 0.331305f, -0.943524f, 0.0f, 0.331305f, -0.943524f, 0.0f, 0.331305f, -0.943524f, 0.0f, -0.724042f, -0.661695f, 0.194736f, -0.724042f, -0.661695f, 0.194736f, -0.724042f, -0.661695f, 0.194736f, -0.491119f, -0.794657f, 0.356821f, -0.491119f, -0.794657f, 0.356821f, -0.491119f, -0.794657f, 0.356821f, -0.408946f, -0.661698f, 0.628425f, -0.408946f, -0.661698f, 0.628425f, -0.408946f, -0.661698f, 0.628425f, -0.408946f, -0.661698f, -0.628425f, -0.408946f, -0.661698f, -0.628425f, -0.408946f, -0.661698f, -0.628425f, -0.491119f, -0.794657f, -0.356821f, -0.491119f, -0.794657f, -0.356821f, -0.491119f, -0.794657f, -0.356821f, -0.724042f, -0.661695f, -0.194736f, -0.724042f, -0.661695f, -0.194736f, -0.724042f, -0.661695f, -0.194736f, 0.4713f, -0.661699f, -0.583122f, 0.4713f, -0.661699f, -0.583122f, 0.4713f, -0.661699f, -0.583122f, 0.187594f, -0.794658f, -0.577345f, 0.187594f, -0.794658f, -0.577345f, 0.187594f, -0.794658f, -0.577345f, -0.03853f, -0.661699f, -0.748779f, -0.03853f, -0.661699f, -0.748779f, -0.03853f, -0.661699f, -0.748779f, 0.992077f, 0.125628f, -0.0f, 0.992077f, 0.125628f, -0.0f, 0.992077f, 0.125628f, -0.0f, 0.982246f, -0.187599f, 0.0f, 0.982246f, -0.187599f, 0.0f, 0.982246f, -0.187599f, 0.0f, 0.904989f, -0.330384f, -0.268031f, 0.904989f, -0.330384f, -0.268031f, 0.904989f, -0.330384f, -0.268031f, 0.306569f, 0.125629f, 0.943522f, 0.306569f, 0.125629f, 0.943522f, 0.306569f, 0.125629f, 0.943522f, 0.303531f, -0.187597f, 0.934171f, 0.303531f, -0.187597f, 0.934171f, 0.303531f, -0.187597f, 0.934171f, 0.534576f, -0.330386f, 0.777865f, 0.534576f, -0.330386f, 0.777865f, 0.534576f, -0.330386f, 0.777865f, -0.802609f, 0.125627f, 0.583126f, -0.802609f, 0.125627f, 0.583126f, -0.802609f, 0.125627f, 0.583126f, -0.794656f, -0.187595f, 0.577348f, -0.794656f, -0.187595f, 0.577348f, -0.794656f, -0.187595f, 0.577348f, -0.574602f, -0.330388f, 0.748784f, -0.574602f, -0.330388f, 0.748784f, -0.574602f, -0.330388f, 0.748784f, -0.802609f, 0.125627f, -0.583126f, -0.802609f, 0.125627f, -0.583126f, -0.802609f, 0.125627f, -0.583126f, -0.794656f, -0.187595f, -0.577348f, -0.794656f, -0.187595f, -0.577348f, -0.794656f, -0.187595f, -0.577348f, -0.889697f, -0.330385f, -0.315095f, -0.889697f, -0.330385f, -0.315095f, -0.889697f, -0.330385f, -0.315095f, 0.306569f, 0.125629f, -0.943522f, 0.306569f, 0.125629f, -0.943522f, 0.306569f, 0.125629f, -0.943522f, 0.303531f, -0.187597f, -0.934171f, 0.303531f, -0.187597f, -0.934171f, 0.303531f, -0.187597f, -0.934171f, 0.024747f, -0.330386f, -0.943521f, 0.024747f, -0.330386f, -0.943521f, 0.024747f, -0.330386f, -0.943521f, 0.574602f, 0.330388f, 0.748784f, 0.574602f, 0.330388f, 0.748784f, 0.574602f, 0.330388f, 0.748784f, 0.794656f, 0.187595f, 0.577348f, 0.794656f, 0.187595f, 0.577348f, 0.794656f, 0.187595f, 0.577348f, 0.889697f, 0.330385f, 0.315095f, 0.889697f, 0.330385f, 0.315095f, 0.889697f, 0.330385f, 0.315095f, -0.534576f, 0.330386f, 0.777865f, -0.534576f, 0.330386f, 0.777865f, -0.534576f, 0.330386f, 0.777865f, -0.303531f, 0.187597f, 0.934171f, -0.303531f, 0.187597f, 0.934171f, -0.303531f, 0.187597f, 0.934171f, -0.024747f, 0.330386f, 0.943521f, -0.024747f, 0.330386f, 0.943521f, -0.024747f, 0.330386f, 0.943521f, -0.904989f, 0.330384f, -0.268031f, -0.904989f, 0.330384f, -0.268031f, -0.904989f, 0.330384f, -0.268031f, -0.982246f, 0.187599f, 0.0f, -0.982246f, 0.187599f, 0.0f, -0.982246f, 0.187599f, 0.0f, -0.904989f, 0.330384f, 0.268031f, -0.904989f, 0.330384f, 0.268031f, -0.904989f, 0.330384f, 0.268031f, -0.024747f, 0.330386f, -0.943521f, -0.024747f, 0.330386f, -0.943521f, -0.024747f, 0.330386f, -0.943521f, -0.303531f, 0.187597f, -0.934171f, -0.303531f, 0.187597f, -0.934171f, -0.303531f, 0.187597f, -0.934171f, -0.534576f, 0.330386f, -0.777865f, -0.534576f, 0.330386f, -0.777865f, -0.534576f, 0.330386f, -0.777865f, 0.889697f, 0.330385f, -0.315095f, 0.889697f, 0.330385f, -0.315095f, 0.889697f, 0.330385f, -0.315095f, 0.794656f, 0.187595f, -0.577348f, 0.794656f, 0.187595f, -0.577348f, 0.794656f, 0.187595f, -0.577348f, 0.574602f, 0.330388f, -0.748784f, 0.574602f, 0.330388f, -0.748784f, 0.574602f, 0.330388f, -0.748784f, 0.268034f, 0.943523f, 0.194737f, 0.268034f, 0.943523f, 0.194737f, 0.268034f, 0.943523f, 0.194737f, 0.491119f, 0.794657f, 0.356821f, 0.491119f, 0.794657f, 0.356821f, 0.491119f, 0.794657f, 0.356821f, 0.724042f, 0.661695f, 0.194736f, 0.724042f, 0.661695f, 0.194736f, 0.724042f, 0.661695f, 0.194736f, -0.102381f, 0.943523f, 0.31509f, -0.102381f, 0.943523f, 0.31509f, -0.102381f, 0.943523f, 0.31509f, -0.187594f, 0.794658f, 0.577345f, -0.187594f, 0.794658f, 0.577345f, -0.187594f, 0.794658f, 0.577345f, 0.03853f, 0.661699f, 0.748779f, 0.03853f, 0.661699f, 0.748779f, 0.03853f, 0.661699f, 0.748779f, -0.331305f, 0.943524f, 0.0f, -0.331305f, 0.943524f, 0.0f, -0.331305f, 0.943524f, 0.0f, -0.60706f, 0.794656f, 0.0f, -0.60706f, 0.794656f, 0.0f, -0.60706f, 0.794656f, 0.0f, -0.700224f, 0.661699f, 0.268032f, -0.700224f, 0.661699f, 0.268032f, -0.700224f, 0.661699f, 0.268032f, -0.102381f, 0.943523f, -0.31509f, -0.102381f, 0.943523f, -0.31509f, -0.102381f, 0.943523f, -0.31509f, -0.187594f, 0.794658f, -0.577345f, -0.187594f, 0.794658f, -0.577345f, -0.187594f, 0.794658f, -0.577345f, -0.4713f, 0.661699f, -0.583122f, -0.4713f, 0.661699f, -0.583122f, -0.4713f, 0.661699f, -0.583122f, 0.268034f, 0.943523f, -0.194737f, 0.268034f, 0.943523f, -0.194737f, 0.268034f, 0.943523f, -0.194737f, 0.491119f, 0.794657f, -0.356821f, 0.491119f, 0.794657f, -0.356821f, 0.491119f, 0.794657f, -0.356821f, 0.408946f, 0.661698f, -0.628425f, 0.408946f, 0.661698f, -0.628425f, 0.408946f, 0.661698f, -0.628425f };
		float amb[] = { 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f };
		float diff[] = { 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f };
		float spec[] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };
		float shine[] = {};

		this.setData(coords, normals, amb, diff, spec, shine);
	}
	
//	@Override
//	public float[] applyTransforms(float[] mModel) {
//		Matrix.rotateM(mModel, 0, rot, 0, 1, 0);
////		Matrix.rotateM(mModel, 0, 90, 1, 0, 0);
//		Matrix.translateM(mModel, 0, -0.5f, 0.0f, 0.0f);
//		Matrix.scaleM(mModel, 0, 0.05f, 0.05f, 0.05f);
//		rot = (rot+1)%360;
//		return mModel;
//	} 
	
	@Override
	public void createShaderProgram() {
		// prepare shaders and OpenGL program
		int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,
				ShaderData.lightVertexShaderCode);
		int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,
				ShaderData.lightFragmentShaderCode);

		mProgram = GLES20.glCreateProgram(); // create empty OpenGL Program

		GLES20.glAttachShader(mProgram, vertexShader); // add vertex shader									
		GLES20.glAttachShader(mProgram, fragmentShader); // add fragment shader
															
		GLES20.glBindAttribLocation(mProgram, 1, "a_Position");
		GLES20.glBindAttribLocation(mProgram, 2, "a_Normal");
		GLES20.glBindAttribLocation(mProgram, 3, "a_Ambient");
		GLES20.glBindAttribLocation(mProgram, 4, "a_Diffuse");
		GLES20.glBindAttribLocation(mProgram, 5, "a_Specular");
		GLES20.glBindAttribLocation(mProgram, 6, "a_Shininess");
		GLES20.glLinkProgram(mProgram); // create OpenGL program executables
	}
	
	@Override
	public void initBuffers() {
		// initialize vertex byte buffer for shape coordinates
		ByteBuffer bbp = ByteBuffer.allocateDirect(
		// (# of coordinate values * 4 bytes per float)
				getCoords().length * 4);
		bbp.order(ByteOrder.nativeOrder());
		vertexBuffer = bbp.asFloatBuffer();
		vertexBuffer.put(getCoords());
		vertexBuffer.position(0);

	}
	
	public void draw(float[] mView, float[] mProj) {
			
		float[] mModel = new float[16];
		float[] mModelView = new float[16];
		float[] mModelViewProj = new float[16];
		
		Matrix.setIdentityM(mModel, 0);
		mModel = applyTransforms(mModel);

		Matrix.multiplyMM(mModelView, 0, mView, 0, mModel, 0);

		Matrix.multiplyMM(mModelViewProj, 0, mProj, 0, mModelView, 0);		
		Matrix.multiplyMV(mELightPos, 0, mModelView, 0, mLightPos, 0);

		GLES20.glUseProgram(mProgram);

		vertexBuffer.position(0);
		mPositionHandle = GLES20.glGetAttribLocation(mProgram, "a_Position");
		GLES20.glEnableVertexAttribArray(mPositionHandle);
		GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,
				GLES20.GL_FLOAT, false, vertexStride, vertexBuffer);
		MyGLRenderer.checkGlError("position");


		mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "u_MVPMatrix");
		// System.out.println("M**************" + mMVPMatrixHandle);
		MyGLRenderer.checkGlError("glGetUniformLocation");
		GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mModelViewProj, 0);
		MyGLRenderer.checkGlError("glUniformMatrix4fv");

		mMVMatrixHandle = GLES20.glGetUniformLocation(mProgram, "u_MVMatrix");
		// System.out.println("M**************" + mMVPMatrixHandle);
		MyGLRenderer.checkGlError("glGetUniformLocation");
		GLES20.glUniformMatrix4fv(mMVMatrixHandle, 1, false, mModelView, 0);
		MyGLRenderer.checkGlError("glUniformMatrix4fv");


		GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, getCoords().length / 3);
		GLES20.glDisableVertexAttribArray(mPositionHandle);
		
		currentTick = (currentTick + 1) % maxTick;
		//System.out.println(currentTick);
	}
	
	public float[] getMELightPos() {
		return mELightPos;
	}
}
